window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "src", "modulename": "src", "kind": "module", "doc": "<p align=center><img src=\"https://github.com/Antonio-Iijima/OPAL/blob/main/logo.png?raw=true\" width=75%></p>\n\n<hr />\n\n<h1 id=\"the-opal-programming-language\">THE OPAL PROGRAMMING LANGUAGE</h1>\n\n<p>OPAL (Omni-Paradigm Programming Language) seeks to unify multiple diverse programming paradigms through a consistent syntax and an intuitive semantics.</p>\n\n<p>OPAL is a continuation and expanded version of the <a href=\"https://github.com/Antonio-Iijima/alvin\">Alvin Programming Language</a>, which inherits many of its design principles and features from Lisp.</p>\n\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n\n<ul>\n<li><a href=\"#installation\">Installation</a></li>\n<li><a href=\"#usage\">Usage</a></li>\n<li><a href=\"#contributing\">Contributing</a></li>\n<li><a href=\"#resources\">Resources</a></li>\n<li><a href=\"#license\">License</a></li>\n</ul>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>Check if you have Python installed:</p>\n\n<pre><code>$ python3 --version\n</code></pre>\n\n<p>If not, install it from the <a href=\"https://www.python.org/\">Python website</a>.</p>\n\n<p>Once Python is installed, clone the repo:</p>\n\n<pre><code>$ git clone https://github.com/Antonio-Iijima/OPAL.git\n$ cd OPAL\n</code></pre>\n\n<p>OPAL uses a virtual environment provided by Python's <code>venv</code> module. In order to run the setup script, execute the following:</p>\n\n<pre><code>$ chmod 755 opal\n$ ./opal --build\n</code></pre>\n\n<p>You are now ready to start programming with OPAL. Run <code>./opal --help</code> for further information, or browse the documentation under <a href=\"#resources\">Resources</a>.</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>The OPAL interpreter can be run in many different ways. To start an interactive interpreter session, use the <code>-i</code> flag:</p>\n\n<pre><code>$ ./opal -i\nOPAL v3.0, interactive\nEnter 'help' to show further information\n(\u03a9)\n</code></pre>\n\n<p>OPAL also includes a built-in, terminal-based IDE, which can be run using <code>./opal --ide</code>.</p>\n\n<p>To run OPAL from any directory, add the following line to your <code>~/.bashrc</code> file, replacing <code>~/PATH/TO/OPAL</code> with the absolute path to the project, and restart the terminal:</p>\n\n<pre><code>opal() { . ~/PATH/TO/OPAL/opal $@; }\n</code></pre>\n\n<p>You should now be able to use <code>opal &lt;flags&gt;</code> directly as a command without needing to <code>cd</code> into the project directory.</p>\n\n<h2 id=\"contributing\">Contributing</h2>\n\n<p>If you have ideas for interesting features, find or fix a bug, or notice a typo, please feel free to contribute via a pull request.</p>\n\n<h2 id=\"resources\">Resources</h2>\n\n<p>For a comprehensive deep dive into the features, usage, and implementation of OPAL, check out the <a href=\"https://antonio-iijima.github.io/OPAL/\">documentation</a>.</p>\n\n<p>OPAL is under active development; the following programming paradigms have varying degrees of functionality:</p>\n\n<ul>\n<li>Imperative\n<ul>\n<li>Procedural</li>\n</ul></li>\n<li>Declarative\n<ul>\n<li>Logic</li>\n</ul></li>\n<li>Functional</li>\n<li>Object-oriented</li>\n<li>Metaprogramming\n<ul>\n<li>Reflective</li>\n</ul></li>\n</ul>\n\n<p>The following is a brief overview of OPAL's current language features:</p>\n\n<ul>\n<li>Cambridge Polish syntax and homoiconicity</li>\n<li>Applicative-order evaluation</li>\n<li>Side-effect</li>\n<li>Dynamic binding</li>\n<li>Dynamic and manual scoping</li>\n<li>Latent and optionally strict variable typing</li>\n<li>First-order functions and closures</li>\n<li>Objects</li>\n<li>Reflexive lambda functions and anonymous recursion</li>\n<li>Dynamic language extension</li>\n</ul>\n\n<h2 id=\"license\">License</h2>\n\n<p>OPAL is licensed under a <a href=\"https://github.com/Antonio-Iijima/alvin/blob/main/LICENSE\">GNU General Public License</a>.</p>\n"}, {"fullname": "src.ide", "modulename": "src.ide", "kind": "module", "doc": "<h2 id=\"the-ide\">The IDE</h2>\n\n<p>OPAL comes with a built-in, terminal-based TUI (textual user interface) IDE. It is\nimplemented using the Python <code>Textual</code> and <code>Rich</code> libraries for a performant and visually\nappealing UI. The IDE is quite customizable through the available CSS file, which can be \nmodified live through the IDE itself (see main docs page for further information) </p>\n\n<p>Current functionality is not extensive, but will continue to be expanded. For now,\nthe IDE supports the following features:</p>\n\n<ul>\n<li>Syntax highlighting \n<ul>\n<li>Basic, to be improved with custom parsing and highlighting for actual language keywords</li>\n</ul></li>\n<li>Switch-based interaction for flags</li>\n<li>Live CSS editing in <code>--ide-dev</code> mode</li>\n<li>Keybinds to close, save, and run files</li>\n</ul>\n"}, {"fullname": "src.ide.app", "modulename": "src.ide.app", "kind": "module", "doc": "<h2 id=\"main-app-implementation\">Main App Implementation</h2>\n\n<p>The IDE app serves as the top level of the app implementation (although the top level entrypoint is in\nIDE.py). The Textual library, on which the IDE is built, prefers to use a \"messages up, attributes down\"\ndesign philosophy; i.e. elements (child widgets) generate custom messages on events, which bubble up through\nthe DOM to their parents. This continues all the way to the top of the DOM, the App widget, unless handled\nsomewhere along the way. </p>\n\n<p>Taking advantage of this allows us to unify all message handling in one place - not in the <code>IDE</code> class, \nbut the <code>IDEFrame</code>, the main container for the rest of the app. Keybinds, on-focus and file-select actions,\nand even the IDE's REPL(<code>process_input()</code>) are handled via messages to the <code>IDEFrame</code>.</p>\n"}, {"fullname": "src.ide.app.IDE", "modulename": "src.ide.app", "qualname": "IDE", "kind": "class", "doc": "<p>The base of the DOM tree. Only serves to hold the <code>IDEFrame</code> and the <code>Footer</code>, \nand set the theme. All messages are handled by <code>IDEFrame</code>.</p>\n", "bases": "typing.Generic[~ReturnType], textual.dom.DOMNode"}, {"fullname": "src.ide.app.IDE.theme", "modulename": "src.ide.app", "qualname": "IDE.theme", "kind": "variable", "doc": "<p>The name of the currently active theme.</p>\n"}, {"fullname": "src.ide.app.IDE.compose", "modulename": "src.ide.app", "qualname": "IDE.compose", "kind": "function", "doc": "<p>Yield child widgets for a container.</p>\n\n<p>This method should be implemented in a subclass.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">textual</span><span class=\"o\">.</span><span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">Widget</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.ide.app.IDEFrame", "modulename": "src.ide.app", "qualname": "IDEFrame", "kind": "class", "doc": "<p>An expanding container with horizontal layout and no scrollbars.</p>\n", "bases": "textual.containers.Horizontal"}, {"fullname": "src.ide.app.IDEFrame.__init__", "modulename": "src.ide.app", "qualname": "IDEFrame.__init__", "kind": "function", "doc": "<p>Initialize a Widget.</p>\n\n<p>Args:\n    *children: Child widgets.\n    name: The name of the widget.\n    id: The ID of the widget in the DOM.\n    classes: The CSS classes for the widget.\n    disabled: Whether the widget is disabled or not.\n    markup: Enable content markup?</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">children</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">classes</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">disabled</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">markup</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "src.ide.app.IDEFrame.BINDINGS", "modulename": "src.ide.app", "qualname": "IDEFrame.BINDINGS", "kind": "variable", "doc": "<p>A list of key bindings.</p>\n", "default_value": "[Binding(key=&#x27;ctrl+w&#x27;, action=&#x27;close_tab()&#x27;, description=&#x27;Close&#x27;, show=True, key_display=None, priority=True, tooltip=&#x27;&#x27;, id=None, system=False, group=None), Binding(key=&#x27;ctrl+s&#x27;, action=&#x27;save_file()&#x27;, description=&#x27;Save&#x27;, show=True, key_display=None, priority=False, tooltip=&#x27;&#x27;, id=None, system=False, group=None), Binding(key=&#x27;ctrl+r&#x27;, action=&#x27;run_file()&#x27;, description=&#x27;Run&#x27;, show=True, key_display=None, priority=False, tooltip=&#x27;&#x27;, id=None, system=False, group=None)]"}, {"fullname": "src.ide.app.IDEFrame.selected_file", "modulename": "src.ide.app", "qualname": "IDEFrame.selected_file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.ide.app.IDEFrame.selected_id", "modulename": "src.ide.app", "qualname": "IDEFrame.selected_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.ide.app.IDEFrame.REPL", "modulename": "src.ide.app", "qualname": "IDEFrame.REPL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.ide.app.IDEFrame.EXPR", "modulename": "src.ide.app", "qualname": "IDEFrame.EXPR", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.ide.app.IDEFrame.init_opal_interpreter", "modulename": "src.ide.app", "qualname": "IDEFrame.init_opal_interpreter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.ide.app.IDEFrame.compose", "modulename": "src.ide.app", "qualname": "IDEFrame.compose", "kind": "function", "doc": "<p>Called by Textual to create child widgets.</p>\n\n<p>This method is called when a widget is mounted or by setting <code>recompose=True</code> when\ncalling [<code>refresh()</code>][textual.widget.Widget.refresh].</p>\n\n<p>Note that you don't typically need to explicitly call this method.</p>\n\n<p>Example:</p>\n\n<pre><code><div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">compose</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ComposeResult</span><span class=\"p\">:</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Header</span><span class=\"p\">()</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s2\">&quot;Press the button below:&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Button</span><span class=\"p\">()</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Footer</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">textual</span><span class=\"o\">.</span><span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">Widget</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.ide.app.IDEFrame.process_input", "modulename": "src.ide.app", "qualname": "IDEFrame.process_input", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stream</span>, </span><span class=\"param\"><span class=\"n\">fromTerminal</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.ide.app.IDEFrame.write_input_to_terminal", "modulename": "src.ide.app", "qualname": "IDEFrame.write_input_to_terminal", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.ide.app.IDEFrame.open_in_new_tab", "modulename": "src.ide.app", "qualname": "IDEFrame.open_in_new_tab", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">selected</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">ide</span><span class=\"o\">.</span><span class=\"n\">editor</span><span class=\"o\">.</span><span class=\"n\">FilteredDirectoryTree</span><span class=\"o\">.</span><span class=\"n\">Selected</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.ide.app.IDEFrame.select_new_tab_info", "modulename": "src.ide.app", "qualname": "IDEFrame.select_new_tab_info", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.ide.app.IDEFrame.action_save_file", "modulename": "src.ide.app", "qualname": "IDEFrame.action_save_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.ide.app.IDEFrame.action_close_tab", "modulename": "src.ide.app", "qualname": "IDEFrame.action_close_tab", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.ide.app.IDEFrame.action_run_file", "modulename": "src.ide.app", "qualname": "IDEFrame.action_run_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.ide.app.IDEFrame.can_focus", "modulename": "src.ide.app", "qualname": "IDEFrame.can_focus", "kind": "variable", "doc": "<p>Widget may receive focus.</p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "src.ide.app.IDEFrame.can_focus_children", "modulename": "src.ide.app", "qualname": "IDEFrame.can_focus_children", "kind": "variable", "doc": "<p>Widget's children may receive focus.</p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.ide.editor", "modulename": "src.ide.editor", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.ide.editor.EditorFrame", "modulename": "src.ide.editor", "qualname": "EditorFrame", "kind": "class", "doc": "<p>An expanding container with horizontal layout and no scrollbars.</p>\n", "bases": "textual.containers.Horizontal"}, {"fullname": "src.ide.editor.EditorFrame.__init__", "modulename": "src.ide.editor", "qualname": "EditorFrame.__init__", "kind": "function", "doc": "<p>Initialize a Widget.</p>\n\n<p>Args:\n    *children: Child widgets.\n    name: The name of the widget.\n    id: The ID of the widget in the DOM.\n    classes: The CSS classes for the widget.\n    disabled: Whether the widget is disabled or not.\n    markup: Enable content markup?</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">children</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">classes</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">disabled</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">markup</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "src.ide.editor.EditorFrame.border_title", "modulename": "src.ide.editor", "qualname": "EditorFrame.border_title", "kind": "variable", "doc": "<p>A title to show in the top border (if there is one).</p>\n"}, {"fullname": "src.ide.editor.EditorFrame.compose", "modulename": "src.ide.editor", "qualname": "EditorFrame.compose", "kind": "function", "doc": "<p>Called by Textual to create child widgets.</p>\n\n<p>This method is called when a widget is mounted or by setting <code>recompose=True</code> when\ncalling [<code>refresh()</code>][textual.widget.Widget.refresh].</p>\n\n<p>Note that you don't typically need to explicitly call this method.</p>\n\n<p>Example:</p>\n\n<pre><code><div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">compose</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ComposeResult</span><span class=\"p\">:</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Header</span><span class=\"p\">()</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s2\">&quot;Press the button below:&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Button</span><span class=\"p\">()</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Footer</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">textual</span><span class=\"o\">.</span><span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">Widget</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.ide.editor.EditorFrame.can_focus", "modulename": "src.ide.editor", "qualname": "EditorFrame.can_focus", "kind": "variable", "doc": "<p>Widget may receive focus.</p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "src.ide.editor.EditorFrame.can_focus_children", "modulename": "src.ide.editor", "qualname": "EditorFrame.can_focus_children", "kind": "variable", "doc": "<p>Widget's children may receive focus.</p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.ide.editor.DirectoryPanel", "modulename": "src.ide.editor", "qualname": "DirectoryPanel", "kind": "class", "doc": "<p>An expanding container with vertical layout and no scrollbars.</p>\n", "bases": "textual.containers.Vertical"}, {"fullname": "src.ide.editor.DirectoryPanel.compose", "modulename": "src.ide.editor", "qualname": "DirectoryPanel.compose", "kind": "function", "doc": "<p>Called by Textual to create child widgets.</p>\n\n<p>This method is called when a widget is mounted or by setting <code>recompose=True</code> when\ncalling [<code>refresh()</code>][textual.widget.Widget.refresh].</p>\n\n<p>Note that you don't typically need to explicitly call this method.</p>\n\n<p>Example:</p>\n\n<pre><code><div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">compose</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ComposeResult</span><span class=\"p\">:</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Header</span><span class=\"p\">()</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s2\">&quot;Press the button below:&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Button</span><span class=\"p\">()</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Footer</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">textual</span><span class=\"o\">.</span><span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">Widget</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.ide.editor.DirectoryPanel.can_focus", "modulename": "src.ide.editor", "qualname": "DirectoryPanel.can_focus", "kind": "variable", "doc": "<p>Widget may receive focus.</p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "src.ide.editor.DirectoryPanel.can_focus_children", "modulename": "src.ide.editor", "qualname": "DirectoryPanel.can_focus_children", "kind": "variable", "doc": "<p>Widget's children may receive focus.</p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.ide.editor.DirectoryOpt", "modulename": "src.ide.editor", "qualname": "DirectoryOpt", "kind": "class", "doc": "<p>An expanding container with horizontal layout and no scrollbars.</p>\n", "bases": "textual.containers.Horizontal"}, {"fullname": "src.ide.editor.DirectoryOpt.can_focus", "modulename": "src.ide.editor", "qualname": "DirectoryOpt.can_focus", "kind": "variable", "doc": "<p>Widget may receive focus.</p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "src.ide.editor.DirectoryOpt.can_focus_children", "modulename": "src.ide.editor", "qualname": "DirectoryOpt.can_focus_children", "kind": "variable", "doc": "<p>Widget's children may receive focus.</p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.ide.editor.FilteredDirectoryTree", "modulename": "src.ide.editor", "qualname": "FilteredDirectoryTree", "kind": "class", "doc": "<p>A Tree widget that presents files and directories.</p>\n", "bases": "textual.widgets._tree.Tree[textual.widgets._directory_tree.DirEntry]"}, {"fullname": "src.ide.editor.FilteredDirectoryTree.Selected", "modulename": "src.ide.editor", "qualname": "FilteredDirectoryTree.Selected", "kind": "class", "doc": "<p>Base class for a message.</p>\n", "bases": "textual.message.Message"}, {"fullname": "src.ide.editor.FilteredDirectoryTree.Selected.__init__", "modulename": "src.ide.editor", "qualname": "FilteredDirectoryTree.Selected.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span></span>)</span>"}, {"fullname": "src.ide.editor.FilteredDirectoryTree.Selected.file", "modulename": "src.ide.editor", "qualname": "FilteredDirectoryTree.Selected.file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.ide.editor.FilteredDirectoryTree.Selected.bubble", "modulename": "src.ide.editor", "qualname": "FilteredDirectoryTree.Selected.bubble", "kind": "variable", "doc": "<p></p>\n", "annotation": ": ClassVar[bool]", "default_value": "True"}, {"fullname": "src.ide.editor.FilteredDirectoryTree.Selected.verbose", "modulename": "src.ide.editor", "qualname": "FilteredDirectoryTree.Selected.verbose", "kind": "variable", "doc": "<p></p>\n", "annotation": ": ClassVar[bool]", "default_value": "False"}, {"fullname": "src.ide.editor.FilteredDirectoryTree.Selected.no_dispatch", "modulename": "src.ide.editor", "qualname": "FilteredDirectoryTree.Selected.no_dispatch", "kind": "variable", "doc": "<p></p>\n", "annotation": ": ClassVar[bool]", "default_value": "False"}, {"fullname": "src.ide.editor.FilteredDirectoryTree.Selected.handler_name", "modulename": "src.ide.editor", "qualname": "FilteredDirectoryTree.Selected.handler_name", "kind": "variable", "doc": "<p>Name of the default message handler.</p>\n", "annotation": ": ClassVar[str]", "default_value": "&#x27;on_filtered_directory_tree_selected&#x27;"}, {"fullname": "src.ide.editor.FilteredDirectoryTree.filter_paths", "modulename": "src.ide.editor", "qualname": "FilteredDirectoryTree.filter_paths", "kind": "function", "doc": "<p>Filter the paths before adding them to the tree.</p>\n\n<p>Args:\n    paths: The paths to be filtered.</p>\n\n<p>Returns:\n    The filtered paths.</p>\n\n<p>By default this method returns all of the paths provided. To create\na filtered <code>DirectoryTree</code> inherit from it and implement your own\nversion of this method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">paths</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.ide.editor.FilteredDirectoryTree.can_focus", "modulename": "src.ide.editor", "qualname": "FilteredDirectoryTree.can_focus", "kind": "variable", "doc": "<p>Widget may receive focus.</p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.ide.editor.FilteredDirectoryTree.can_focus_children", "modulename": "src.ide.editor", "qualname": "FilteredDirectoryTree.can_focus_children", "kind": "variable", "doc": "<p>Widget's children may receive focus.</p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.ide.editor.EditorPanel", "modulename": "src.ide.editor", "qualname": "EditorPanel", "kind": "class", "doc": "<p>An expanding container with vertical layout and no scrollbars.</p>\n", "bases": "textual.containers.Vertical"}, {"fullname": "src.ide.editor.EditorPanel.compose", "modulename": "src.ide.editor", "qualname": "EditorPanel.compose", "kind": "function", "doc": "<p>Called by Textual to create child widgets.</p>\n\n<p>This method is called when a widget is mounted or by setting <code>recompose=True</code> when\ncalling [<code>refresh()</code>][textual.widget.Widget.refresh].</p>\n\n<p>Note that you don't typically need to explicitly call this method.</p>\n\n<p>Example:</p>\n\n<pre><code><div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">compose</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ComposeResult</span><span class=\"p\">:</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Header</span><span class=\"p\">()</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s2\">&quot;Press the button below:&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Button</span><span class=\"p\">()</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Footer</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">textual</span><span class=\"o\">.</span><span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">Widget</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.ide.editor.EditorPanel.can_focus", "modulename": "src.ide.editor", "qualname": "EditorPanel.can_focus", "kind": "variable", "doc": "<p>Widget may receive focus.</p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "src.ide.editor.EditorPanel.can_focus_children", "modulename": "src.ide.editor", "qualname": "EditorPanel.can_focus_children", "kind": "variable", "doc": "<p>Widget's children may receive focus.</p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.ide.editor.EditorTabs", "modulename": "src.ide.editor", "qualname": "EditorTabs", "kind": "class", "doc": "<p>A container with associated tabs to toggle content visibility.</p>\n", "bases": "textual.widgets._tabbed_content.TabbedContent"}, {"fullname": "src.ide.editor.EditorTabs.SelectNone", "modulename": "src.ide.editor", "qualname": "EditorTabs.SelectNone", "kind": "class", "doc": "<p>Base class for a message.</p>\n", "bases": "textual.message.Message"}, {"fullname": "src.ide.editor.EditorTabs.SelectNone.bubble", "modulename": "src.ide.editor", "qualname": "EditorTabs.SelectNone.bubble", "kind": "variable", "doc": "<p></p>\n", "annotation": ": ClassVar[bool]", "default_value": "True"}, {"fullname": "src.ide.editor.EditorTabs.SelectNone.verbose", "modulename": "src.ide.editor", "qualname": "EditorTabs.SelectNone.verbose", "kind": "variable", "doc": "<p></p>\n", "annotation": ": ClassVar[bool]", "default_value": "False"}, {"fullname": "src.ide.editor.EditorTabs.SelectNone.no_dispatch", "modulename": "src.ide.editor", "qualname": "EditorTabs.SelectNone.no_dispatch", "kind": "variable", "doc": "<p></p>\n", "annotation": ": ClassVar[bool]", "default_value": "False"}, {"fullname": "src.ide.editor.EditorTabs.SelectNone.handler_name", "modulename": "src.ide.editor", "qualname": "EditorTabs.SelectNone.handler_name", "kind": "variable", "doc": "<p>Name of the default message handler.</p>\n", "annotation": ": ClassVar[str]", "default_value": "&#x27;on_editor_tabs_select_none&#x27;"}, {"fullname": "src.ide.editor.EditorTabs.can_focus", "modulename": "src.ide.editor", "qualname": "EditorTabs.can_focus", "kind": "variable", "doc": "<p>Widget may receive focus.</p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "src.ide.editor.EditorTabs.can_focus_children", "modulename": "src.ide.editor", "qualname": "EditorTabs.can_focus_children", "kind": "variable", "doc": "<p>Widget's children may receive focus.</p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.ide.editor.EditorOpt", "modulename": "src.ide.editor", "qualname": "EditorOpt", "kind": "class", "doc": "<p>A container with grid layout.</p>\n", "bases": "textual.containers.Grid"}, {"fullname": "src.ide.editor.EditorOpt.can_focus", "modulename": "src.ide.editor", "qualname": "EditorOpt.can_focus", "kind": "variable", "doc": "<p>Widget may receive focus.</p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "src.ide.editor.EditorOpt.can_focus_children", "modulename": "src.ide.editor", "qualname": "EditorOpt.can_focus_children", "kind": "variable", "doc": "<p>Widget's children may receive focus.</p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.ide.editor.Editor", "modulename": "src.ide.editor", "qualname": "Editor", "kind": "class", "doc": "<p>A base class for a Widget that handles its own scrolling (i.e. doesn't rely\non the compositor to render children).</p>\n", "bases": "textual.widgets._text_area.TextArea"}, {"fullname": "src.ide.editor.Editor.__init__", "modulename": "src.ide.editor", "qualname": "Editor.__init__", "kind": "function", "doc": "<p>Construct a new <code>TextArea</code>.</p>\n\n<p>Args:\n    text: The initial text to load into the TextArea.\n    language: The language to use.\n    theme: The theme to use.\n    soft_wrap: Enable soft wrapping.\n    tab_behavior: If 'focus', pressing tab will switch focus. If 'indent', pressing tab will insert a tab.\n    read_only: Enable read-only mode. This prevents edits using the keyboard.\n    show_cursor: Show the cursor in read only mode (no effect otherwise).\n    show_line_numbers: Show line numbers on the left edge.\n    line_number_start: What line number to start on.\n    max_checkpoints: The maximum number of undo history checkpoints to retain.\n    name: The name of the <code>TextArea</code> widget.\n    id: The ID of the widget, used to refer to it from Textual CSS.\n    classes: One or more Textual CSS compatible class names separated by spaces.\n    disabled: True if the widget is disabled.\n    tooltip: Optional tooltip.\n    compact: Enable compact style (without borders).\n    highlight_cursor_line: Highlight the line under the cursor.\n    placeholder: Text to display when there is not content.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">language</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">theme</span><span class=\"o\">=</span><span class=\"s1\">&#39;css&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">soft_wrap</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">tab_behavior</span><span class=\"o\">=</span><span class=\"s1\">&#39;focus&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">read_only</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">show_cursor</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">show_line_numbers</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">line_number_start</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">max_checkpoints</span><span class=\"o\">=</span><span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">classes</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">disabled</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">tooltip</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">compact</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">highlight_cursor_line</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">placeholder</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "src.ide.editor.Editor.file", "modulename": "src.ide.editor", "qualname": "Editor.file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.ide.editor.Editor.saved", "modulename": "src.ide.editor", "qualname": "Editor.saved", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.ide.editor.Editor.can_focus", "modulename": "src.ide.editor", "qualname": "Editor.can_focus", "kind": "variable", "doc": "<p>Widget may receive focus.</p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.ide.editor.Editor.can_focus_children", "modulename": "src.ide.editor", "qualname": "Editor.can_focus_children", "kind": "variable", "doc": "<p>Widget's children may receive focus.</p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.ide.terminal", "modulename": "src.ide.terminal", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.ide.terminal.TerminalFrame", "modulename": "src.ide.terminal", "qualname": "TerminalFrame", "kind": "class", "doc": "<p>An expanding container with vertical layout and no scrollbars.</p>\n", "bases": "textual.containers.Vertical"}, {"fullname": "src.ide.terminal.TerminalFrame.__init__", "modulename": "src.ide.terminal", "qualname": "TerminalFrame.__init__", "kind": "function", "doc": "<p>Initialize a Widget.</p>\n\n<p>Args:\n    *children: Child widgets.\n    name: The name of the widget.\n    id: The ID of the widget in the DOM.\n    classes: The CSS classes for the widget.\n    disabled: Whether the widget is disabled or not.\n    markup: Enable content markup?</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">children</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">classes</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">disabled</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">markup</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "src.ide.terminal.TerminalFrame.border_title", "modulename": "src.ide.terminal", "qualname": "TerminalFrame.border_title", "kind": "variable", "doc": "<p>A title to show in the top border (if there is one).</p>\n"}, {"fullname": "src.ide.terminal.TerminalFrame.compose", "modulename": "src.ide.terminal", "qualname": "TerminalFrame.compose", "kind": "function", "doc": "<p>Called by Textual to create child widgets.</p>\n\n<p>This method is called when a widget is mounted or by setting <code>recompose=True</code> when\ncalling [<code>refresh()</code>][textual.widget.Widget.refresh].</p>\n\n<p>Note that you don't typically need to explicitly call this method.</p>\n\n<p>Example:</p>\n\n<pre><code><div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">compose</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ComposeResult</span><span class=\"p\">:</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Header</span><span class=\"p\">()</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s2\">&quot;Press the button below:&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Button</span><span class=\"p\">()</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Footer</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">textual</span><span class=\"o\">.</span><span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">Widget</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.ide.terminal.TerminalFrame.can_focus", "modulename": "src.ide.terminal", "qualname": "TerminalFrame.can_focus", "kind": "variable", "doc": "<p>Widget may receive focus.</p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "src.ide.terminal.TerminalFrame.can_focus_children", "modulename": "src.ide.terminal", "qualname": "TerminalFrame.can_focus_children", "kind": "variable", "doc": "<p>Widget's children may receive focus.</p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.ide.terminal.OptionsPanel", "modulename": "src.ide.terminal", "qualname": "OptionsPanel", "kind": "class", "doc": "<p>An expanding container with horizontal layout and no scrollbars.</p>\n", "bases": "textual.containers.Horizontal"}, {"fullname": "src.ide.terminal.OptionsPanel.compose", "modulename": "src.ide.terminal", "qualname": "OptionsPanel.compose", "kind": "function", "doc": "<p>Called by Textual to create child widgets.</p>\n\n<p>This method is called when a widget is mounted or by setting <code>recompose=True</code> when\ncalling [<code>refresh()</code>][textual.widget.Widget.refresh].</p>\n\n<p>Note that you don't typically need to explicitly call this method.</p>\n\n<p>Example:</p>\n\n<pre><code><div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">compose</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ComposeResult</span><span class=\"p\">:</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Header</span><span class=\"p\">()</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s2\">&quot;Press the button below:&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Button</span><span class=\"p\">()</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Footer</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">textual</span><span class=\"o\">.</span><span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">Widget</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.ide.terminal.OptionsPanel.can_focus", "modulename": "src.ide.terminal", "qualname": "OptionsPanel.can_focus", "kind": "variable", "doc": "<p>Widget may receive focus.</p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "src.ide.terminal.OptionsPanel.can_focus_children", "modulename": "src.ide.terminal", "qualname": "OptionsPanel.can_focus_children", "kind": "variable", "doc": "<p>Widget's children may receive focus.</p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.ide.terminal.TerminalPanel", "modulename": "src.ide.terminal", "qualname": "TerminalPanel", "kind": "class", "doc": "<p>An expanding container with vertical layout and no scrollbars.</p>\n", "bases": "textual.containers.Vertical"}, {"fullname": "src.ide.terminal.TerminalPanel.compose", "modulename": "src.ide.terminal", "qualname": "TerminalPanel.compose", "kind": "function", "doc": "<p>Called by Textual to create child widgets.</p>\n\n<p>This method is called when a widget is mounted or by setting <code>recompose=True</code> when\ncalling [<code>refresh()</code>][textual.widget.Widget.refresh].</p>\n\n<p>Note that you don't typically need to explicitly call this method.</p>\n\n<p>Example:</p>\n\n<pre><code><div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">compose</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ComposeResult</span><span class=\"p\">:</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Header</span><span class=\"p\">()</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s2\">&quot;Press the button below:&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Button</span><span class=\"p\">()</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Footer</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">textual</span><span class=\"o\">.</span><span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">Widget</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.ide.terminal.TerminalPanel.can_focus", "modulename": "src.ide.terminal", "qualname": "TerminalPanel.can_focus", "kind": "variable", "doc": "<p>Widget may receive focus.</p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "src.ide.terminal.TerminalPanel.can_focus_children", "modulename": "src.ide.terminal", "qualname": "TerminalPanel.can_focus_children", "kind": "variable", "doc": "<p>Widget's children may receive focus.</p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.ide.terminal.TerminalOpt", "modulename": "src.ide.terminal", "qualname": "TerminalOpt", "kind": "class", "doc": "<p>An expanding container with horizontal layout and no scrollbars.</p>\n", "bases": "textual.containers.Horizontal"}, {"fullname": "src.ide.terminal.TerminalOpt.can_focus", "modulename": "src.ide.terminal", "qualname": "TerminalOpt.can_focus", "kind": "variable", "doc": "<p>Widget may receive focus.</p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "src.ide.terminal.TerminalOpt.can_focus_children", "modulename": "src.ide.terminal", "qualname": "TerminalOpt.can_focus_children", "kind": "variable", "doc": "<p>Widget's children may receive focus.</p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.ide.terminal.Terminal", "modulename": "src.ide.terminal", "qualname": "Terminal", "kind": "class", "doc": "<p>A container with vertical layout and an automatic scrollbar on the Y axis.</p>\n", "bases": "textual.containers.VerticalScroll"}, {"fullname": "src.ide.terminal.Terminal.__init__", "modulename": "src.ide.terminal", "qualname": "Terminal.__init__", "kind": "function", "doc": "<p>Construct a scrollable container.</p>\n\n<p>Args:\n    *children: Child widgets.\n    name: The name of the widget.\n    id: The ID of the widget in the DOM.\n    classes: The CSS classes for the widget.\n    disabled: Whether the widget is disabled or not.\n    can_focus: Can this container be focused?\n    can_focus_children: Can this container's children be focused?\n    can_maximized: Allow this container to maximize? <code>None</code> to use default logic.,</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">children</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">classes</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">disabled</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">can_focus</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">can_focus_children</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">can_maximize</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.ide.terminal.Terminal.compose", "modulename": "src.ide.terminal", "qualname": "Terminal.compose", "kind": "function", "doc": "<p>Called by Textual to create child widgets.</p>\n\n<p>This method is called when a widget is mounted or by setting <code>recompose=True</code> when\ncalling [<code>refresh()</code>][textual.widget.Widget.refresh].</p>\n\n<p>Note that you don't typically need to explicitly call this method.</p>\n\n<p>Example:</p>\n\n<pre><code><div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">compose</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ComposeResult</span><span class=\"p\">:</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Header</span><span class=\"p\">()</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s2\">&quot;Press the button below:&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Button</span><span class=\"p\">()</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Footer</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.ide.terminal.Terminal.can_focus", "modulename": "src.ide.terminal", "qualname": "Terminal.can_focus", "kind": "variable", "doc": "<p>Widget may receive focus.</p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.ide.terminal.Terminal.can_focus_children", "modulename": "src.ide.terminal", "qualname": "Terminal.can_focus_children", "kind": "variable", "doc": "<p>Widget's children may receive focus.</p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.ide.terminal.TerminalLog", "modulename": "src.ide.terminal", "qualname": "TerminalLog", "kind": "class", "doc": "<p>A widget for logging Rich renderables and text.</p>\n", "bases": "textual.widgets._rich_log.RichLog"}, {"fullname": "src.ide.terminal.TerminalLog.__init__", "modulename": "src.ide.terminal", "qualname": "TerminalLog.__init__", "kind": "function", "doc": "<p>Create a <code>RichLog</code> widget.</p>\n\n<p>Args:\n    max_lines: Maximum number of lines in the log or <code>None</code> for no maximum.\n    min_width: Width to use for calls to <code>write</code> with no specified <code>width</code>.\n    wrap: Enable word wrapping (default is off).\n    highlight: Automatically highlight content. By default, the <code>ReprHighlighter</code> is used.\n        To customize highlighting, set <code>highlight=True</code> and then set the <code>highlighter</code>\n        attribute to an instance of <code>Highlighter</code>.\n    markup: Apply Rich console markup.\n    auto_scroll: Enable automatic scrolling to end.\n    name: The name of the text log.\n    id: The ID of the text log in the DOM.\n    classes: The CSS classes of the text log.\n    disabled: Whether the text log is disabled or not.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">max_lines</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">min_width</span><span class=\"o\">=</span><span class=\"mi\">78</span>,</span><span class=\"param\">\t<span class=\"n\">wrap</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">highlight</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">markup</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">auto_scroll</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;TerminalLog&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">classes</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">disabled</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "src.ide.terminal.TerminalLog.can_focus", "modulename": "src.ide.terminal", "qualname": "TerminalLog.can_focus", "kind": "variable", "doc": "<p>Widget may receive focus.</p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.ide.terminal.TerminalLog.can_focus_children", "modulename": "src.ide.terminal", "qualname": "TerminalLog.can_focus_children", "kind": "variable", "doc": "<p>Widget's children may receive focus.</p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.ide.terminal.TerminalInputRow", "modulename": "src.ide.terminal", "qualname": "TerminalInputRow", "kind": "class", "doc": "<p>An expanding container with horizontal layout and no scrollbars.</p>\n", "bases": "textual.containers.Horizontal"}, {"fullname": "src.ide.terminal.TerminalInputRow.compose", "modulename": "src.ide.terminal", "qualname": "TerminalInputRow.compose", "kind": "function", "doc": "<p>Called by Textual to create child widgets.</p>\n\n<p>This method is called when a widget is mounted or by setting <code>recompose=True</code> when\ncalling [<code>refresh()</code>][textual.widget.Widget.refresh].</p>\n\n<p>Note that you don't typically need to explicitly call this method.</p>\n\n<p>Example:</p>\n\n<pre><code><div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">compose</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ComposeResult</span><span class=\"p\">:</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Header</span><span class=\"p\">()</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s2\">&quot;Press the button below:&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Button</span><span class=\"p\">()</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Footer</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.ide.terminal.TerminalInputRow.can_focus", "modulename": "src.ide.terminal", "qualname": "TerminalInputRow.can_focus", "kind": "variable", "doc": "<p>Widget may receive focus.</p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "src.ide.terminal.TerminalInputRow.can_focus_children", "modulename": "src.ide.terminal", "qualname": "TerminalInputRow.can_focus_children", "kind": "variable", "doc": "<p>Widget's children may receive focus.</p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.ide.terminal.TerminalInput", "modulename": "src.ide.terminal", "qualname": "TerminalInput", "kind": "class", "doc": "<p>A text input widget.</p>\n", "bases": "textual.widgets._input.Input"}, {"fullname": "src.ide.terminal.TerminalInput.__init__", "modulename": "src.ide.terminal", "qualname": "TerminalInput.__init__", "kind": "function", "doc": "<p>Initialise the <code>Input</code> widget.</p>\n\n<p>Args:\n    value: An optional default value for the input.\n    placeholder: Optional placeholder text for the input.\n    highlighter: An optional highlighter for the input.\n    password: Flag to say if the field should obfuscate its content.\n    restrict: A regex to restrict character inputs.\n    type: The type of the input.\n    max_length: The maximum length of the input, or 0 for no maximum length.\n    suggester: [<code>Suggester</code>][textual.suggester.Suggester] associated with this\n        input instance.\n    validators: An iterable of validators that the Input value will be checked against.\n    validate_on: Zero or more of the values \"blur\", \"changed\", and \"submitted\",\n        which determine when to do input validation. The default is to do\n        validation for all messages.\n    valid_empty: Empty values are valid.\n    select_on_focus: Whether to select all text on focus.\n    name: Optional name for the input widget.\n    id: Optional ID for the widget.\n    classes: Optional initial classes for the widget.\n    disabled: Whether the input is disabled or not.\n    tooltip: Optional tooltip.\n    compact: Enable compact style (without borders).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">value</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">placeholder</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">highlighter</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">password</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">restrict</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">&#39;text&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">suggester</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">validate_on</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_empty</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">select_on_focus</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;TerminalInput&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">classes</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">disabled</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">tooltip</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">compact</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "src.ide.terminal.TerminalInput.can_focus", "modulename": "src.ide.terminal", "qualname": "TerminalInput.can_focus", "kind": "variable", "doc": "<p>Widget may receive focus.</p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.ide.terminal.TerminalInput.can_focus_children", "modulename": "src.ide.terminal", "qualname": "TerminalInput.can_focus_children", "kind": "variable", "doc": "<p>Widget's children may receive focus.</p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "src.lang", "modulename": "src.lang", "kind": "module", "doc": "<p>Lang documentation info.</p>\n"}, {"fullname": "src.lang.clips", "modulename": "src.lang.clips", "kind": "module", "doc": "<p>Integration for CLIPS-style propositional logic.</p>\n"}, {"fullname": "src.lang.clips.CLIPS", "modulename": "src.lang.clips", "qualname": "CLIPS", "kind": "class", "doc": "<p>General class for all self-contained CLIPS instances.</p>\n"}, {"fullname": "src.lang.clips.CLIPS.facts", "modulename": "src.lang.clips", "qualname": "CLIPS.facts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.clips.CLIPS.rules", "modulename": "src.lang.clips", "qualname": "CLIPS.rules", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.clips.CLIPS.DEFRULE", "modulename": "src.lang.clips", "qualname": "CLIPS.DEFRULE", "kind": "function", "doc": "<p>Create a new logical relation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.clips.CLIPS.ASSERT", "modulename": "src.lang.clips", "qualname": "CLIPS.ASSERT", "kind": "function", "doc": "<p>Declare a new fact.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.clips.CLIPS.RETRACT", "modulename": "src.lang.clips", "qualname": "CLIPS.RETRACT", "kind": "function", "doc": "<p>Retract an asserted fact.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.clips.CLIPS.INFERENCE", "modulename": "src.lang.clips", "qualname": "CLIPS.INFERENCE", "kind": "function", "doc": "<p>Run resolution on the entire database to a depth of <code>n</code>. If not provided runs until no more relations found.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.clips.CLIPS.IMPLIES", "modulename": "src.lang.clips", "qualname": "CLIPS.IMPLIES", "kind": "function", "doc": "<p>Logical implication.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.clips.CLIPS.NOT", "modulename": "src.lang.clips", "qualname": "CLIPS.NOT", "kind": "function", "doc": "<p>Logical negation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.clips.CLIPS.DECLARE", "modulename": "src.lang.clips", "qualname": "CLIPS.DECLARE", "kind": "function", "doc": "<p>Declare a Boolean variable.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.clips.CLIPS.RESET", "modulename": "src.lang.clips", "qualname": "CLIPS.RESET", "kind": "function", "doc": "<p>Reset the current CLIPS instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.clips.CLIPS.WATCH", "modulename": "src.lang.clips", "qualname": "CLIPS.WATCH", "kind": "function", "doc": "<p>Print new facts to standard output.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.clips.CLIPS.UNWATCH", "modulename": "src.lang.clips", "qualname": "CLIPS.UNWATCH", "kind": "function", "doc": "<p>Undo the <code>WATCH</code> function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.clips.announce", "modulename": "src.lang.clips", "qualname": "announce", "kind": "function", "doc": "<p>Create a new CLIPS instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.clips.renounce", "modulename": "src.lang.clips", "qualname": "renounce", "kind": "function", "doc": "<p>Destroy a created CLIPS instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.datatypes", "modulename": "src.lang.datatypes", "kind": "module", "doc": "<p>Custom datatype classes.</p>\n"}, {"fullname": "src.lang.datatypes.closables", "modulename": "src.lang.datatypes.closables", "kind": "module", "doc": "<p>Closable datatypes (functions, templates, &amp;c).</p>\n"}, {"fullname": "src.lang.datatypes.closables.Closable", "modulename": "src.lang.datatypes.closables", "qualname": "Closable", "kind": "class", "doc": "<p>Parent class for all OPAL structures supporting closures, i.e. functions and templates.</p>\n"}, {"fullname": "src.lang.datatypes.closables.Closable.__init__", "modulename": "src.lang.datatypes.closables", "qualname": "Closable.__init__", "kind": "function", "doc": "<p>Initialize datatype and generate unique ID.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.lang.datatypes.closables.Closable.name", "modulename": "src.lang.datatypes.closables", "qualname": "Closable.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.datatypes.closables.Closable.parameters", "modulename": "src.lang.datatypes.closables", "qualname": "Closable.parameters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.datatypes.closables.Closable.body", "modulename": "src.lang.datatypes.closables", "qualname": "Closable.body", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.datatypes.closables.Closable.id", "modulename": "src.lang.datatypes.closables", "qualname": "Closable.id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.datatypes.closables.Closable.generate_id", "modulename": "src.lang.datatypes.closables", "qualname": "Closable.generate_id", "kind": "function", "doc": "<p>Generate a randomized identification string between 0 and k digits long.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">15</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.datatypes.closables.Function", "modulename": "src.lang.datatypes.closables", "qualname": "Function", "kind": "class", "doc": "<p>Custom OPAL function class.</p>\n", "bases": "Closable"}, {"fullname": "src.lang.datatypes.closables.Function.__init__", "modulename": "src.lang.datatypes.closables", "qualname": "Function.__init__", "kind": "function", "doc": "<p>Initialize closable function type.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">isMethod</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">isLazy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "src.lang.datatypes.closables.Function.type", "modulename": "src.lang.datatypes.closables", "qualname": "Function.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.datatypes.closables.Function.isLazy", "modulename": "src.lang.datatypes.closables", "qualname": "Function.isLazy", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.datatypes.closables.Function.eval", "modulename": "src.lang.datatypes.closables", "qualname": "Function.eval", "kind": "function", "doc": "<p>Function call evaluation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.datatypes.closables.Template", "modulename": "src.lang.datatypes.closables", "qualname": "Template", "kind": "class", "doc": "<p>Template data type.</p>\n", "bases": "Closable"}, {"fullname": "src.lang.datatypes.closables.Template.__init__", "modulename": "src.lang.datatypes.closables", "qualname": "Template.__init__", "kind": "function", "doc": "<p>Initialize datatype and generate unique ID.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.lang.datatypes.closables.Template.type", "modulename": "src.lang.datatypes.closables", "qualname": "Template.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.datatypes.closables.Template.init", "modulename": "src.lang.datatypes.closables", "qualname": "Template.init", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.datatypes.closables.Template.new", "modulename": "src.lang.datatypes.closables", "qualname": "Template.new", "kind": "function", "doc": "<p>Create a new template instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">lang</span><span class=\"o\">.</span><span class=\"n\">datatypes</span><span class=\"o\">.</span><span class=\"n\">closables</span><span class=\"o\">.</span><span class=\"n\">Instance</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.datatypes.closables.Instance", "modulename": "src.lang.datatypes.closables", "qualname": "Instance", "kind": "class", "doc": "<p>Instance of a template.</p>\n", "bases": "Closable"}, {"fullname": "src.lang.datatypes.closables.Instance.__init__", "modulename": "src.lang.datatypes.closables", "qualname": "Instance.__init__", "kind": "function", "doc": "<p>Initialize datatype and generate unique ID.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span>)</span>"}, {"fullname": "src.lang.datatypes.closables.Instance.type", "modulename": "src.lang.datatypes.closables", "qualname": "Instance.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.datatypes.closables.Instance.eval", "modulename": "src.lang.datatypes.closables", "qualname": "Instance.eval", "kind": "function", "doc": "<p>Evaluate call to instance method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.datatypes.lazy", "modulename": "src.lang.datatypes.lazy", "kind": "module", "doc": "<p>Lazy evaluation.</p>\n"}, {"fullname": "src.lang.datatypes.lazy.Lazy", "modulename": "src.lang.datatypes.lazy", "qualname": "Lazy", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.lang.datatypes.lazy.Lazy.__init__", "modulename": "src.lang.datatypes.lazy", "qualname": "Lazy.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "src.lang.datatypes.lazy.Lazy.func", "modulename": "src.lang.datatypes.lazy", "qualname": "Lazy.func", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.datatypes.lazy.Lazy.eval", "modulename": "src.lang.datatypes.lazy", "qualname": "Lazy.eval", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.datatypes.lazy.Frozen", "modulename": "src.lang.datatypes.lazy", "qualname": "Frozen", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.lang.datatypes.lazy.Frozen.__init__", "modulename": "src.lang.datatypes.lazy", "qualname": "Frozen.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "src.lang.datatypes.lazy.Frozen.value", "modulename": "src.lang.datatypes.lazy", "qualname": "Frozen.value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.datatypes.lazy.Frozen.thaw", "modulename": "src.lang.datatypes.lazy", "qualname": "Frozen.thaw", "kind": "function", "doc": "<p>Compute the value of a <code>Frozen</code> expression.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.datatypes.typing", "modulename": "src.lang.datatypes.typing", "kind": "module", "doc": "<p>Strict and latent variable typing.</p>\n"}, {"fullname": "src.lang.datatypes.typing.Variable", "modulename": "src.lang.datatypes.typing", "qualname": "Variable", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.lang.datatypes.typing.Variable.__init__", "modulename": "src.lang.datatypes.typing", "qualname": "Variable.__init__", "kind": "function", "doc": "<p>Constructs a <code>Strict</code> or <code>Latent</code> variable object based on the specification of <code>var</code> with the value <code>val</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "src.lang.datatypes.typing.TypedVariable", "modulename": "src.lang.datatypes.typing", "qualname": "TypedVariable", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.lang.datatypes.typing.TypedVariable.__init__", "modulename": "src.lang.datatypes.typing", "qualname": "TypedVariable.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "src.lang.datatypes.typing.TypedVariable.name", "modulename": "src.lang.datatypes.typing", "qualname": "TypedVariable.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.datatypes.typing.TypedVariable.val", "modulename": "src.lang.datatypes.typing", "qualname": "TypedVariable.val", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.datatypes.typing.TypedVariable.types", "modulename": "src.lang.datatypes.typing", "qualname": "TypedVariable.types", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.datatypes.typing.TypedVariable.setVal", "modulename": "src.lang.datatypes.typing", "qualname": "TypedVariable.setVal", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.datatypes.typing.TypedVariable.getVal", "modulename": "src.lang.datatypes.typing", "qualname": "TypedVariable.getVal", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.datatypes.typing.Strict", "modulename": "src.lang.datatypes.typing", "qualname": "Strict", "kind": "class", "doc": "<p></p>\n", "bases": "TypedVariable"}, {"fullname": "src.lang.datatypes.typing.Strict.__init__", "modulename": "src.lang.datatypes.typing", "qualname": "Strict.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "src.lang.datatypes.typing.Strict.type", "modulename": "src.lang.datatypes.typing", "qualname": "Strict.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.datatypes.typing.Strict.getType", "modulename": "src.lang.datatypes.typing", "qualname": "Strict.getType", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.datatypes.typing.Strict.typeCheck", "modulename": "src.lang.datatypes.typing", "qualname": "Strict.typeCheck", "kind": "function", "doc": "<p>Raises <code>TypeError</code> if currently contained variable type is not <code>self.type</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.datatypes.typing.Strict.setVal", "modulename": "src.lang.datatypes.typing", "qualname": "Strict.setVal", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">lang</span><span class=\"o\">.</span><span class=\"n\">datatypes</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Strict</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.datatypes.typing.Latent", "modulename": "src.lang.datatypes.typing", "qualname": "Latent", "kind": "class", "doc": "<p></p>\n", "bases": "TypedVariable"}, {"fullname": "src.lang.datatypes.typing.Latent.getType", "modulename": "src.lang.datatypes.typing", "qualname": "Latent.getType", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.datatypes.typing.Latent.setVal", "modulename": "src.lang.datatypes.typing", "qualname": "Latent.setVal", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.environment", "modulename": "src.lang.environment", "kind": "module", "doc": "<h2 id=\"the-environment\">The Environment</h2>\n\n<p>The Environment is possibly the most essential part of any programming language implementation.\nOPAL is no different in this respect. The Environment is defined as a class, and serves two main\npurposes:</p>\n\n<ul>\n<li>Variable and function definition</li>\n<li>Scope management</li>\n</ul>\n\n<p>The Environment is instantiated as a class variable of the <code>Interpreter</code>. Explicit usage involves\ncalling it through <code>evaluate()</code> with <code>set</code> or <code>def</code>. More complex internal control over the Environment\nis necessary for many other structures (closed functions and <code>let</code> statements); this is handled internally\nby calling <code>Environment</code> methods directly.</p>\n\n<hr />\n"}, {"fullname": "src.lang.environment.Environment", "modulename": "src.lang.environment", "qualname": "Environment", "kind": "class", "doc": "<p>Environment data structure, represented as a stack of dictionaries.</p>\n"}, {"fullname": "src.lang.environment.Environment.__init__", "modulename": "src.lang.environment", "qualname": "Environment.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.lang.environment.Environment.env", "modulename": "src.lang.environment", "qualname": "Environment.env", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.environment.Environment.clone", "modulename": "src.lang.environment", "qualname": "Environment.clone", "kind": "function", "doc": "<p>Makes a deep copy of the environment. Used by functions to safely inherit parent closures.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A new <code>Environment</code> instance containing a deep copy of the current <code>env</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">lang</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">Environment</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.environment.Environment.begin_scope", "modulename": "src.lang.environment", "qualname": "Environment.begin_scope", "kind": "function", "doc": "<p>Begin new scope.</p>\n\n<pre><code>(burrow)\n</code></pre>\n\n<p><code>burrow</code> should be used in code only with extreme caution.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.environment.Environment.end_scope", "modulename": "src.lang.environment", "qualname": "Environment.end_scope", "kind": "function", "doc": "<p>Destroy $n$ scopes, by default 1.</p>\n\n<pre><code>(surface)\n</code></pre>\n\n<p><code>surface</code> removes one scope only. Should be used in code only with extreme caution. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>int</code> n</strong>:  The number of scopes to clear.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.environment.Environment.extend", "modulename": "src.lang.environment", "qualname": "Environment.extend", "kind": "function", "doc": "<p>Extend the current <code>Environment</code> with the <code>env</code> of another <code>Environment</code>. New <code>env</code>\nis added as lowest scope to current <code>Environment</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>Environment</code> other</strong>:  Another <code>Environment</code> instance.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">lang</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">Environment</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.environment.Environment.runlocal", "modulename": "src.lang.environment", "qualname": "Environment.runlocal", "kind": "function", "doc": "<p>Run any function in a local scope, which is destroyed when the function returns.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>callable</code> logic</strong>:  The internal logic of the function to be run locally.</li>\n<li><strong><code>*</code> args</strong>:  Positional arguments to be passed to <code>logic</code>. </li>\n<li><strong><code>**</code> kwargs</strong>:  Keyword arguments to be passed to <code>logic</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The output of <code>logic(*args, **kwargs)</code> in local scope.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">logic</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">callable</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.environment.Environment.runClosed", "modulename": "src.lang.environment", "qualname": "Environment.runClosed", "kind": "function", "doc": "<p>Extended version of the <code>runLocal</code> method which allows for the closure of a function.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>Environment</code> closure</strong>:  A closure <code>Environment</code>, should be from <code>INT.interpreter.CLOSURES</code>.</li>\n<li><strong><code>callable</code> logic</strong>:  The internal logic of the function to be run locally.</li>\n<li><strong><code>*</code> args</strong>:  Positional arguments to be passed to <code>logic</code>. </li>\n<li><strong><code>**</code> kwargs</strong>:  Keyword arguments to be passed to <code>logic</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The output of <code>logic(*args, **kwargs)</code> in local enclosed scope.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">closure</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">lang</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">Environment</span>,</span><span class=\"param\">\t<span class=\"n\">logic</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">callable</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.environment.Environment.find_scope", "modulename": "src.lang.environment", "qualname": "Environment.find_scope", "kind": "function", "doc": "<p>Finds the index of the lowest scope in which <code>var</code> has been declared.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>str</code> var</strong>:  Variable name to be searched.</li>\n<li><strong>(optional) <code>int</code> scope</strong>:  If provided, begins search at given scope. Otherwise starts from lowest scope.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The scope of the variable, or <code>None</code> if has not been declared.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">scope</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.environment.Environment.lookup", "modulename": "src.lang.environment", "qualname": "Environment.lookup", "kind": "function", "doc": "<p>Looks up the value of a declared variable.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>str</code> var</strong>:  Variable name to be looked up.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The value of the variable if declared.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><code>NameError</code> if variable is not declared.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.environment.Environment.cleanup", "modulename": "src.lang.environment", "qualname": "Environment.cleanup", "kind": "function", "doc": "<p>Basic garbage collection for the closure environments attached to functions.</p>\n\n<p>When a function or other <code>Closable</code> object is removed from the environment, its closure\n<code>Environment</code> persists independently as an entry in <code>INT.interpreter.CLOSURES</code> and must be\nmanually removed. <code>cleanup()</code> is therefore run whenever a variable is removed from the <code>Environment</code>, \nto check if it is a <code>Closable</code>; if so, it removes its entry.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>str</code> var</strong>:  The variable name to be checked.</li>\n<li><strong>(optional) <code>int</code> scope</strong>:  If provided, begins search at given scope. Otherwise starts from lowest scope.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">scope</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.environment.Environment.set", "modulename": "src.lang.environment", "qualname": "Environment.set", "kind": "function", "doc": "<p>Assign a value to a variable.</p>\n\n<pre><code>(set a 1)\n(set (float b) 3.14)\n</code></pre>\n\n<p>The core function of the <code>Environment</code>, nearly every operation in the language involves this method\nto some degree. <code>set()</code> takes a variable declaration and creates a <code>Latent</code> or <code>Strict</code> variable object\ncontaining the provided value. A few points to note:</p>\n\n<ul>\n<li>In previous implementations, <code>set()</code> would evaluate automatically<code>val</code> before binding. This has been\ndeprecated in favor of the increased flexibility of allowing caller to choose whether and how to evaluate.\n<ul>\n<li>The built-in function <code>set</code> (e.g. <code>(set a 1)</code>) <strong>does</strong> evaluate <code>val</code>.</li>\n</ul></li>\n<li><code>Strict</code> objects are only created if a type is specified in the passed <code>var</code>, i.e. <code>(int a)</code>. Otherwise\n<code>Latent</code> objects are the default.</li>\n<li>In keeping with the first point, <strong><code>set()</code> does not look up the passed variable</strong>. If the caller wants\n<code>set()</code> to update a previously declared variable (if it exists), the output of <code>Environment.find_scope(var)</code> \nshould be explicitly passed to <code>scope</code>. This will then be used if the variable exists, else lowest scope.</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>list|str</code> var</strong>:  The variable name. If passed a list, the first element must be a type and the \nsecond must be the variable name. The variable object will be <code>Strict</code> with the type set to that provided.\nOtherwise, the variable will be <code>Latent</code> and the type determined by the bound value.</li>\n<li><strong><code>any</code> val</strong>:  A value to be bound to the variable.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">scope</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.environment.Environment.delete", "modulename": "src.lang.environment", "qualname": "Environment.delete", "kind": "function", "doc": "<p>Deletes a declared variable.</p>\n\n<pre><code>(del x)\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>str</code> var</strong>:  The name of the variable to be deleted.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><code>NameError</code> if variable is not declared.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.environment.Environment.define", "modulename": "src.lang.environment", "qualname": "Environment.define", "kind": "function", "doc": "<p>Define a named function.</p>\n\n<pre><code>(def f (x y) (+ x y))\n(def g ((int x) y) (+ x y))\n</code></pre>\n\n<p>This is essentially a wrapper for <code>set()</code> which builds a <code>Function</code> object from the provided\narguments, and passes that to <code>set()</code>'s <code>val</code> parameter.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>str</code> name</strong>:  The name of the function.</li>\n<li><strong><code>list</code> parameters</strong>:  The parameters of the function. Each parameter can be either <code>Latent</code>\n(no type included, variable name only) or <code>Strict</code> (type included in a tuple with the variable name).</li>\n<li><strong><code>list</code> body</strong>:  The function body to be evaluated on call.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.environment.Environment.deftemplate", "modulename": "src.lang.environment", "qualname": "Environment.deftemplate", "kind": "function", "doc": "<p>Define a new template.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.environment.Environment.match_arguments", "modulename": "src.lang.environment", "qualname": "Environment.match_arguments", "kind": "function", "doc": "<p>Matches a list of parameters with a list of arguments. Primarily for use in functions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>list</code> parameters</strong>:  A list of parameters (variable names).</li>\n<li><strong><code>list</code> args</strong>:  A list of arguments to be bound to the parameters.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.evaluate", "modulename": "src.lang.evaluate", "kind": "module", "doc": "<h2 id=\"the-evaluate-function\">The <code>evaluate()</code> Function</h2>\n\n<p>The evaluation function is the core of OPAL. <code>evaluate()</code> is responsible for</p>\n"}, {"fullname": "src.lang.evaluate.evaluate", "modulename": "src.lang.evaluate", "qualname": "evaluate", "kind": "function", "doc": "<p>Evaluates complete OPAL expressions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expr</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.extensions", "modulename": "src.lang.extensions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.lang.extensions.factorial", "modulename": "src.lang.extensions", "qualname": "factorial", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.extensions.ternary", "modulename": "src.lang.extensions", "qualname": "ternary", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ifthis</span>, </span><span class=\"param\"><span class=\"n\">thenthis</span>, </span><span class=\"param\"><span class=\"n\">elsethis</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.extensions.loop", "modulename": "src.lang.extensions", "qualname": "loop", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">i</span>, </span><span class=\"param\"><span class=\"n\">contents</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.interpreter", "modulename": "src.lang.interpreter", "kind": "module", "doc": "<p>Manage interaction with the interpreter command-line.</p>\n"}, {"fullname": "src.lang.interpreter.Interpreter", "modulename": "src.lang.interpreter", "qualname": "Interpreter", "kind": "class", "doc": "<p>Interpreter command-line management.</p>\n"}, {"fullname": "src.lang.interpreter.Interpreter.__init__", "modulename": "src.lang.interpreter", "qualname": "Interpreter.__init__", "kind": "function", "doc": "<p>Boilerplate setup for <code>Interpreter</code> instance.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prompt_symbol</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;(\u03a9)&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">default_color</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;green&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">single_comment</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;--&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">multiline_comment_open</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/-&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">multiline_comment_close</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;-/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">flags</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.lang.interpreter.Interpreter.VERSION", "modulename": "src.lang.interpreter", "qualname": "Interpreter.VERSION", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.interpreter.Interpreter.NAME", "modulename": "src.lang.interpreter", "qualname": "Interpreter.NAME", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.interpreter.Interpreter.PATH", "modulename": "src.lang.interpreter", "qualname": "Interpreter.PATH", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.interpreter.Interpreter.EXTENSIONS_PATH", "modulename": "src.lang.interpreter", "qualname": "Interpreter.EXTENSIONS_PATH", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.interpreter.Interpreter.FLAGS", "modulename": "src.lang.interpreter", "qualname": "Interpreter.FLAGS", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.interpreter.Interpreter.DEFAULT_COLOR", "modulename": "src.lang.interpreter", "qualname": "Interpreter.DEFAULT_COLOR", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.interpreter.Interpreter.DEFAULT_OUTLINE", "modulename": "src.lang.interpreter", "qualname": "Interpreter.DEFAULT_OUTLINE", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.interpreter.Interpreter.PROMPT_SYMBOL", "modulename": "src.lang.interpreter", "qualname": "Interpreter.PROMPT_SYMBOL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.interpreter.Interpreter.PROMPT", "modulename": "src.lang.interpreter", "qualname": "Interpreter.PROMPT", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.interpreter.Interpreter.SINGLE_COMMENT", "modulename": "src.lang.interpreter", "qualname": "Interpreter.SINGLE_COMMENT", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.interpreter.Interpreter.MULTILINE_COMMENT_OPEN", "modulename": "src.lang.interpreter", "qualname": "Interpreter.MULTILINE_COMMENT_OPEN", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.interpreter.Interpreter.MULTILINE_COMMENT_CLOSE", "modulename": "src.lang.interpreter", "qualname": "Interpreter.MULTILINE_COMMENT_CLOSE", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.interpreter.Interpreter.ERROR_COUNTER", "modulename": "src.lang.interpreter", "qualname": "Interpreter.ERROR_COUNTER", "kind": "variable", "doc": "<p>Track the number of programming errors by the user for use with -z flag.</p>\n"}, {"fullname": "src.lang.interpreter.Interpreter.COMMENT_COUNTER", "modulename": "src.lang.interpreter", "qualname": "Interpreter.COMMENT_COUNTER", "kind": "variable", "doc": "<p>Tracks expression comments for balancing.</p>\n"}, {"fullname": "src.lang.interpreter.Interpreter.EXTENSION_INDEX", "modulename": "src.lang.interpreter", "qualname": "Interpreter.EXTENSION_INDEX", "kind": "variable", "doc": "<p>Ordered list of all extensions, stored as tuples of (name, lines).</p>\n"}, {"fullname": "src.lang.interpreter.Interpreter.EXTENSION_LOG", "modulename": "src.lang.interpreter", "qualname": "Interpreter.EXTENSION_LOG", "kind": "variable", "doc": "<p>Tracks added extensions for exit logging if -p.</p>\n"}, {"fullname": "src.lang.interpreter.Interpreter.CLOSURES", "modulename": "src.lang.interpreter", "qualname": "Interpreter.CLOSURES", "kind": "variable", "doc": "<p>Closure environments, accessed by ID.</p>\n", "annotation": ": dict[str, src.lang.environment.Environment]"}, {"fullname": "src.lang.interpreter.Interpreter.GLOBALS", "modulename": "src.lang.interpreter", "qualname": "Interpreter.GLOBALS", "kind": "variable", "doc": "<p>Global variables.</p>\n"}, {"fullname": "src.lang.interpreter.Interpreter.IMPORTS", "modulename": "src.lang.interpreter", "qualname": "Interpreter.IMPORTS", "kind": "variable", "doc": "<p>Imported modules.</p>\n"}, {"fullname": "src.lang.interpreter.Interpreter.ENV", "modulename": "src.lang.interpreter", "qualname": "Interpreter.ENV", "kind": "variable", "doc": "<p>The global <code>Environment</code> instance.</p>\n"}, {"fullname": "src.lang.interpreter.Interpreter.KEYWORDS", "modulename": "src.lang.interpreter", "qualname": "Interpreter.KEYWORDS", "kind": "variable", "doc": "<p>Keywords stored by category.</p>\n"}, {"fullname": "src.lang.interpreter.Interpreter.INITIAL_KEYWORD_NUM", "modulename": "src.lang.interpreter", "qualname": "Interpreter.INITIAL_KEYWORD_NUM", "kind": "variable", "doc": "<p>Total number of built-in / extension keywords on interpreter start.</p>\n"}, {"fullname": "src.lang.interpreter.Interpreter.current_keyword_num", "modulename": "src.lang.interpreter", "qualname": "Interpreter.current_keyword_num", "kind": "function", "doc": "<p>Return current total number of keywords in the language.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.interpreter.Interpreter.get_extension", "modulename": "src.lang.interpreter", "qualname": "Interpreter.get_extension", "kind": "function", "doc": "<p>Reloads the extension library and returns currently available extensions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">extension</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.interpreter.Interpreter.extend", "modulename": "src.lang.interpreter", "qualname": "Interpreter.extend", "kind": "function", "doc": "<p>Add extensions in Python to OPAL.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">write</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">padding</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.interpreter.Interpreter.delete_extension", "modulename": "src.lang.interpreter", "qualname": "Interpreter.delete_extension", "kind": "function", "doc": "<p>Delete an extension.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">extension</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.interpreter.Interpreter.exit_extensions", "modulename": "src.lang.interpreter", "qualname": "Interpreter.exit_extensions", "kind": "function", "doc": "<p>Safely save or remove any extensions added in an interactive interpreter session.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">Text</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.interpreter.Interpreter.del_random_keyword", "modulename": "src.lang.interpreter", "qualname": "Interpreter.del_random_keyword", "kind": "function", "doc": "<p>Delete a random keyword from the language for the duration of the interpreter instance if the user makes a mistake.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">Text</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.interpreter.interpreter", "modulename": "src.lang.interpreter", "qualname": "interpreter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.lang.interpreter.Interpreter"}, {"fullname": "src.lang.keywords", "modulename": "src.lang.keywords", "kind": "module", "doc": "<p>Language keywords/built-in functions</p>\n"}, {"fullname": "src.lang.keywords.REGULAR", "modulename": "src.lang.keywords", "qualname": "REGULAR", "kind": "variable", "doc": "<p>Common applicative-order functions.</p>\n", "default_value": "{&#x27;len&#x27;: &lt;built-in function len&gt;, &#x27;sort&#x27;: &lt;built-in function sorted&gt;, &#x27;show&#x27;: &lt;function show&gt;, &#x27;eq&#x27;: &lt;function eq&gt;, &#x27;+&#x27;: &lt;function add&gt;, &#x27;-&#x27;: &lt;function subtract&gt;, &#x27;*&#x27;: &lt;function multiply&gt;, &#x27;/&#x27;: &lt;function f_divide&gt;, &#x27;**&#x27;: &lt;function exponent&gt;, &#x27;//&#x27;: &lt;function i_divide&gt;, &#x27;&gt;&#x27;: &lt;function greater&gt;, &#x27;&lt;&#x27;: &lt;function less&gt;, &#x27;&gt;=&#x27;: &lt;function geq&gt;, &#x27;&lt;=&#x27;: &lt;function leq&gt;, &#x27;!=&#x27;: &lt;function uneq&gt;, &#x27;%&#x27;: &lt;function mod&gt;, &#x27;append&#x27;: &lt;function append&gt;, &#x27;elem&#x27;: &lt;function elem&gt;, &#x27;==&#x27;: &lt;function eq&gt;, &#x27;ref&#x27;: &lt;function ref&gt;, &#x27;null?&#x27;: &lt;function isnull&gt;, &#x27;atom?&#x27;: &lt;function isatom&gt;, &#x27;number?&#x27;: &lt;function isnumber&gt;, &#x27;cons&#x27;: &lt;function cons&gt;, &#x27;setref&#x27;: &lt;function setref&gt;, &#x27;++&#x27;: &lt;function increment&gt;, &#x27;bool?&#x27;: &lt;function isbool&gt;, &#x27;list&#x27;: &lt;function lst&gt;, &#x27;usrin&#x27;: &lt;function usrin&gt;}"}, {"fullname": "src.lang.keywords.IRREGULAR", "modulename": "src.lang.keywords", "qualname": "IRREGULAR", "kind": "variable", "doc": "<p>Semi-normal-order functions; arguments are evaluated when necessary or not at all.</p>\n", "default_value": "{&#x27;repeat&#x27;: &lt;function repeat&gt;, &#x27;let&#x27;: &lt;function let&gt;, &#x27;do&#x27;: &lt;function do&gt;, &#x27;eval&#x27;: &lt;function OPAL_eval&gt;, &#x27;getfile&#x27;: &lt;function getfile&gt;, &#x27;global&#x27;: &lt;function globals&gt;, &#x27;import&#x27;: &lt;function import_lib&gt;, &#x27;load&#x27;: &lt;function load&gt;, &#x27;list?&#x27;: &lt;function islist&gt;, &#x27;string?&#x27;: &lt;function isstring&gt;}"}, {"fullname": "src.lang.keywords.BOOLEAN", "modulename": "src.lang.keywords", "qualname": "BOOLEAN", "kind": "variable", "doc": "<p>Boolean operations convert their arguments to boolean values before executing.</p>\n", "default_value": "{&#x27;and&#x27;: &lt;function _boolean.&lt;locals&gt;.boolean&gt;, &#x27;or&#x27;: &lt;function _boolean.&lt;locals&gt;.boolean&gt;, &#x27;nor&#x27;: &lt;function _boolean.&lt;locals&gt;.boolean&gt;, &#x27;xor&#x27;: &lt;function _boolean.&lt;locals&gt;.boolean&gt;, &#x27;nand&#x27;: &lt;function _boolean.&lt;locals&gt;.boolean&gt;, &#x27;not&#x27;: &lt;function _boolean.&lt;locals&gt;.boolean&gt;}"}, {"fullname": "src.lang.keywords.SPECIAL", "modulename": "src.lang.keywords", "qualname": "SPECIAL", "kind": "variable", "doc": "<p>Special forms and other functions having evaluation strategies handled explicitly by evaluate().</p>\n", "default_value": "{&#x27;set&#x27;, &#x27;list?&#x27;, &#x27;string?&#x27;, &#x27;lambda&#x27;, &#x27;cond&#x27;, &#x27;quote&#x27;, &#x27;new&#x27;, &#x27;until&#x27;, &#x27;lazy&#x27;}"}, {"fullname": "src.lang.keywords.boolean", "modulename": "src.lang.keywords.boolean", "kind": "module", "doc": "<p>Basic boolean function.</p>\n"}, {"fullname": "src.lang.keywords.boolean.NOT", "modulename": "src.lang.keywords.boolean", "qualname": "NOT", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.boolean.OR", "modulename": "src.lang.keywords.boolean", "qualname": "OR", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.boolean.AND", "modulename": "src.lang.keywords.boolean", "qualname": "AND", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.boolean.XOR", "modulename": "src.lang.keywords.boolean", "qualname": "XOR", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.boolean.NOR", "modulename": "src.lang.keywords.boolean", "qualname": "NOR", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.boolean.NAND", "modulename": "src.lang.keywords.boolean", "qualname": "NAND", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.builtins", "modulename": "src.lang.keywords.builtins", "kind": "module", "doc": "<p>General built-in functions.</p>\n"}, {"fullname": "src.lang.keywords.builtins.append", "modulename": "src.lang.keywords.builtins", "qualname": "append", "kind": "function", "doc": "<p>Return the concatenation of <code>x</code> and <code>y</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.builtins.cons", "modulename": "src.lang.keywords.builtins", "qualname": "cons", "kind": "function", "doc": "<p>Return a list where <code>x</code> is the head and <code>y</code> is the tail.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.builtins.show", "modulename": "src.lang.keywords.builtins", "qualname": "show", "kind": "function", "doc": "<p>Prints to standard output.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expr</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.builtins.usrin", "modulename": "src.lang.keywords.builtins", "qualname": "usrin", "kind": "function", "doc": "<p>Reads from standard input.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expr</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.builtins.elem", "modulename": "src.lang.keywords.builtins", "qualname": "elem", "kind": "function", "doc": "<p>List and string membership function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.builtins.ref", "modulename": "src.lang.keywords.builtins", "qualname": "ref", "kind": "function", "doc": "<p>List indexing.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.builtins.setref", "modulename": "src.lang.keywords.builtins", "qualname": "setref", "kind": "function", "doc": "<p>Replace the existing contents of <code>l</code> at index <code>i</code> with <code>item</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.builtins.evlist", "modulename": "src.lang.keywords.builtins", "qualname": "evlist", "kind": "function", "doc": "<p>Evaluates each element in the input list and returns them as a list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.builtins.head", "modulename": "src.lang.keywords.builtins", "qualname": "head", "kind": "function", "doc": "<p>Returns the head of a list or raises a TypeError.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.builtins.tail", "modulename": "src.lang.keywords.builtins", "qualname": "tail", "kind": "function", "doc": "<p>Returns the tail of a list or raises a TypeError.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.builtins.evcxr", "modulename": "src.lang.keywords.builtins", "qualname": "evcxr", "kind": "function", "doc": "<p>Tail-recursive evaluation of <code>cxr</code> expressions (arbitrary combinations of <code>car</code> and <code>cdr</code>).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">output</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.builtins.rebool", "modulename": "src.lang.keywords.builtins", "qualname": "rebool", "kind": "function", "doc": "<p>Convert the literal <code>#t</code> and <code>#f</code> into the <code>bool</code> datatype.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.builtins.lst", "modulename": "src.lang.keywords.builtins", "qualname": "lst", "kind": "function", "doc": "<p>List type conversion.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.control", "modulename": "src.lang.keywords.control", "kind": "module", "doc": "<p>Control flow functions.</p>\n"}, {"fullname": "src.lang.keywords.control.cond", "modulename": "src.lang.keywords.control", "qualname": "cond", "kind": "function", "doc": "<p>Evaluate conditional expression.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expr</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.control.repeat", "modulename": "src.lang.keywords.control", "qualname": "repeat", "kind": "function", "doc": "<p>Evaluate <code>body</code> <code>number</code> times.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.control.until", "modulename": "src.lang.keywords.control", "qualname": "until", "kind": "function", "doc": "<p>Repeatedly evaluate.evaluate <code>body</code> until <code>cond</code> is <code>#f</code>. Runs in a local scope.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cond</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">bool</span>, </span><span class=\"param\"><span class=\"n\">inc</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.control.let", "modulename": "src.lang.keywords.control", "qualname": "let", "kind": "function", "doc": "<p>Binds all variables in <code>bindings</code> and evaluates <code>body</code> in a local scope.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bindings</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.control.do", "modulename": "src.lang.keywords.control", "qualname": "do", "kind": "function", "doc": "<p>Evaluates a series of expressions before returning the value of <code>body</code>. Runs in a local scope.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">exprlist</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.mathematical", "modulename": "src.lang.keywords.mathematical", "kind": "module", "doc": "<p>Basic mathematical functions.</p>\n"}, {"fullname": "src.lang.keywords.mathematical.eq", "modulename": "src.lang.keywords.mathematical", "qualname": "eq", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.mathematical.uneq", "modulename": "src.lang.keywords.mathematical", "qualname": "uneq", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.mathematical.exponent", "modulename": "src.lang.keywords.mathematical", "qualname": "exponent", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.mathematical.leq", "modulename": "src.lang.keywords.mathematical", "qualname": "leq", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.mathematical.geq", "modulename": "src.lang.keywords.mathematical", "qualname": "geq", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.mathematical.i_divide", "modulename": "src.lang.keywords.mathematical", "qualname": "i_divide", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.mathematical.less", "modulename": "src.lang.keywords.mathematical", "qualname": "less", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.mathematical.greater", "modulename": "src.lang.keywords.mathematical", "qualname": "greater", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.mathematical.multiply", "modulename": "src.lang.keywords.mathematical", "qualname": "multiply", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.mathematical.f_divide", "modulename": "src.lang.keywords.mathematical", "qualname": "f_divide", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.mathematical.add", "modulename": "src.lang.keywords.mathematical", "qualname": "add", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.mathematical.subtract", "modulename": "src.lang.keywords.mathematical", "qualname": "subtract", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.mathematical.mod", "modulename": "src.lang.keywords.mathematical", "qualname": "mod", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.mathematical.increment", "modulename": "src.lang.keywords.mathematical", "qualname": "increment", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.miscellaneous", "modulename": "src.lang.keywords.miscellaneous", "kind": "module", "doc": "<p>Other miscellaneous functions.</p>\n"}, {"fullname": "src.lang.keywords.miscellaneous.OPAL_eval", "modulename": "src.lang.keywords.miscellaneous", "qualname": "OPAL_eval", "kind": "function", "doc": "<p>Interpreter access from the command line for quoted expressions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expr</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.miscellaneous.getfile", "modulename": "src.lang.keywords.miscellaneous", "qualname": "getfile", "kind": "function", "doc": "<p>File system access.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.miscellaneous.import_lib", "modulename": "src.lang.keywords.miscellaneous", "qualname": "import_lib", "kind": "function", "doc": "<p>Import a library with an optional alias.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">_as</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">alias</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.miscellaneous.load", "modulename": "src.lang.keywords.miscellaneous", "qualname": "load", "kind": "function", "doc": "<p>Load and run a .op file from provided relative location.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">location</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.miscellaneous.run_method", "modulename": "src.lang.keywords.miscellaneous", "qualname": "run_method", "kind": "function", "doc": "<p>Call a method from an imported module or library.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">imported</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.miscellaneous.globals", "modulename": "src.lang.keywords.miscellaneous", "qualname": "globals", "kind": "function", "doc": "<p>Define or access global variables.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.predicates", "modulename": "src.lang.keywords.predicates", "kind": "module", "doc": "<p>Predicates for internal and external use.</p>\n"}, {"fullname": "src.lang.keywords.predicates.isquote", "modulename": "src.lang.keywords.predicates", "qualname": "isquote", "kind": "function", "doc": "<p>Unary <code>quote</code> expression predicate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.predicates.isvariable", "modulename": "src.lang.keywords.predicates", "qualname": "isvariable", "kind": "function", "doc": "<p>Unary <code>variable</code> predicate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.predicates.iskeyword", "modulename": "src.lang.keywords.predicates", "qualname": "iskeyword", "kind": "function", "doc": "<p>Unary <code>keyword</code> predicate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.predicates.isimport", "modulename": "src.lang.keywords.predicates", "qualname": "isimport", "kind": "function", "doc": "<p>Unary <code>import</code> predicate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.predicates.isnumber", "modulename": "src.lang.keywords.predicates", "qualname": "isnumber", "kind": "function", "doc": "<p>Unary <code>int</code> or <code>float</code> predicate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.predicates.isint", "modulename": "src.lang.keywords.predicates", "qualname": "isint", "kind": "function", "doc": "<p>Unary <code>int</code> predicate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.predicates.isfloat", "modulename": "src.lang.keywords.predicates", "qualname": "isfloat", "kind": "function", "doc": "<p>Unary <code>float</code> predicate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.predicates.isfunction", "modulename": "src.lang.keywords.predicates", "qualname": "isfunction", "kind": "function", "doc": "<p>Unary <code>Function</code> predicate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">lang</span><span class=\"o\">.</span><span class=\"n\">datatypes</span><span class=\"o\">.</span><span class=\"n\">closables</span><span class=\"o\">.</span><span class=\"n\">Function</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.predicates.istemplate", "modulename": "src.lang.keywords.predicates", "qualname": "istemplate", "kind": "function", "doc": "<p>Unary <code>Template</code> and <code>Instance</code> predicate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.predicates.iscxr", "modulename": "src.lang.keywords.predicates", "qualname": "iscxr", "kind": "function", "doc": "<p>Unary <code>car</code> and <code>cdr</code> predicate, generalized to include all abbreviated forms.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.predicates.isatom", "modulename": "src.lang.keywords.predicates", "qualname": "isatom", "kind": "function", "doc": "<p>Unary <code>atom</code> predicate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.predicates.isnull", "modulename": "src.lang.keywords.predicates", "qualname": "isnull", "kind": "function", "doc": "<p>Unary <code>null</code> predicate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.predicates.isbool", "modulename": "src.lang.keywords.predicates", "qualname": "isbool", "kind": "function", "doc": "<p>Unary <code>bool</code> predicate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.predicates.islist", "modulename": "src.lang.keywords.predicates", "qualname": "islist", "kind": "function", "doc": "<p>Unary <code>list</code> predicate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.predicates.isstring", "modulename": "src.lang.keywords.predicates", "qualname": "isstring", "kind": "function", "doc": "<p>Unary <code>string</code> predicate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.predicates.isfrozen", "modulename": "src.lang.keywords.predicates", "qualname": "isfrozen", "kind": "function", "doc": "<p>Unary <code>Frozen</code> predicate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">lang</span><span class=\"o\">.</span><span class=\"n\">datatypes</span><span class=\"o\">.</span><span class=\"n\">lazy</span><span class=\"o\">.</span><span class=\"n\">Frozen</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.keywords.predicates.islazy", "modulename": "src.lang.keywords.predicates", "qualname": "islazy", "kind": "function", "doc": "<p>Unary <code>Frozen</code> predicate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">lang</span><span class=\"o\">.</span><span class=\"n\">datatypes</span><span class=\"o\">.</span><span class=\"n\">lazy</span><span class=\"o\">.</span><span class=\"n\">Lazy</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.parser", "modulename": "src.lang.parser", "kind": "module", "doc": "<p>Parser and basic syntax checker.</p>\n"}, {"fullname": "src.lang.parser.iscommented", "modulename": "src.lang.parser", "qualname": "iscommented", "kind": "function", "doc": "<p>Checks for single- or multiline comments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expr</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.parser.iscomplete", "modulename": "src.lang.parser", "qualname": "iscomplete", "kind": "function", "doc": "<p>Checks for <em>hopefully</em> complete expressions in the REPL.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expr</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.parser.isperfectlybalanced", "modulename": "src.lang.parser", "qualname": "isperfectlybalanced", "kind": "function", "doc": "<p>Check for balanced parentheses in an OPAL expression.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expr</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.parser.syntax_check", "modulename": "src.lang.parser", "qualname": "syntax_check", "kind": "function", "doc": "<p>Checks balanced parentheses, proper expression nesting, etc. Raises errors if any conditions not met, otherwise returns <code>expr</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expr</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.parser.retype", "modulename": "src.lang.parser", "qualname": "retype", "kind": "function", "doc": "<p>Replace int, float, and bool strings with their correct data types.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.parser.preprocess", "modulename": "src.lang.parser", "qualname": "preprocess", "kind": "function", "doc": "<p>Replace all special data types.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expr</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.parser.toPython", "modulename": "src.lang.parser", "qualname": "toPython", "kind": "function", "doc": "<p>Convert OPAL syntax to Python list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expr</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.parser.toOPAL", "modulename": "src.lang.parser", "qualname": "toOPAL", "kind": "function", "doc": "<p>Convert Python list to fully-parenthesized OPAL string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.parser.parse", "modulename": "src.lang.parser", "qualname": "parse", "kind": "function", "doc": "<p>Perform syntax checking and convert OPAL expression string to manipulable Python lists.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.repl", "modulename": "src.lang.repl", "kind": "module", "doc": "<p>Read, Eval, Print, Loop.</p>\n"}, {"fullname": "src.lang.repl.REPL", "modulename": "src.lang.repl", "qualname": "REPL", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.lang.repl.REPL.COMMANDS", "modulename": "src.lang.repl", "qualname": "REPL.COMMANDS", "kind": "variable", "doc": "<p>Internal REPL commands</p>\n"}, {"fullname": "src.lang.repl.REPL.Message", "modulename": "src.lang.repl", "qualname": "REPL.Message", "kind": "class", "doc": "<p>Base class for internal REPL messages.</p>\n"}, {"fullname": "src.lang.repl.REPL.Message.__init__", "modulename": "src.lang.repl", "qualname": "REPL.Message.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.lang.repl.REPL.Message.msg", "modulename": "src.lang.repl", "qualname": "REPL.Message.msg", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.lang.repl.REPL.Message.get", "modulename": "src.lang.repl", "qualname": "REPL.Message.get", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.repl.REPL.Comment", "modulename": "src.lang.repl", "qualname": "REPL.Comment", "kind": "class", "doc": "<p>Expression is commented.</p>\n", "bases": "REPL.Message"}, {"fullname": "src.lang.repl.REPL.Complete", "modulename": "src.lang.repl", "qualname": "REPL.Complete", "kind": "class", "doc": "<p>Expression is complete and evaluated.</p>\n", "bases": "REPL.Message"}, {"fullname": "src.lang.repl.REPL.Incomplete", "modulename": "src.lang.repl", "qualname": "REPL.Incomplete", "kind": "class", "doc": "<p>Expression is incomplete.</p>\n", "bases": "REPL.Message"}, {"fullname": "src.lang.repl.REPL.Error", "modulename": "src.lang.repl", "qualname": "REPL.Error", "kind": "class", "doc": "<p>Error in evaluating expression.</p>\n", "bases": "REPL.Message"}, {"fullname": "src.lang.repl.REPL.RER", "modulename": "src.lang.repl", "qualname": "REPL.RER", "kind": "function", "doc": "<p>Read-Evaluate-Return function. Meant to be looped.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">expr</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">lang</span><span class=\"o\">.</span><span class=\"n\">repl</span><span class=\"o\">.</span><span class=\"n\">REPL</span><span class=\"o\">.</span><span class=\"n\">Comment</span> <span class=\"o\">|</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">lang</span><span class=\"o\">.</span><span class=\"n\">repl</span><span class=\"o\">.</span><span class=\"n\">REPL</span><span class=\"o\">.</span><span class=\"n\">Complete</span> <span class=\"o\">|</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">lang</span><span class=\"o\">.</span><span class=\"n\">repl</span><span class=\"o\">.</span><span class=\"n\">REPL</span><span class=\"o\">.</span><span class=\"n\">Incomplete</span> <span class=\"o\">|</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">lang</span><span class=\"o\">.</span><span class=\"n\">repl</span><span class=\"o\">.</span><span class=\"n\">REPL</span><span class=\"o\">.</span><span class=\"n\">Error</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.repl.REPL.RERL", "modulename": "src.lang.repl", "qualname": "REPL.RERL", "kind": "function", "doc": "<p>Read-Evaluate-Return-Loop. Wrapper for <code>RER</code>. Yields a continuous stream of output (generator).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stream</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">TextIOWrapper</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;UTF-8&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.lang.repl.REPL.REPL", "modulename": "src.lang.repl", "qualname": "REPL.REPL", "kind": "function", "doc": "<p>Read-Evaluate-Print-Loop. Converts <code>RERL</code> output to interactive stdout.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">stream</span><span class=\"o\">=&lt;</span><span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">TextIOWrapper</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;UTF-8&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">suppress</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.repl.REPL.interpret", "modulename": "src.lang.repl", "qualname": "REPL.interpret", "kind": "function", "doc": "<p>Fully interpret a complete expression.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">expr</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">Text</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.repl.REPL.prompt", "modulename": "src.lang.repl", "qualname": "REPL.prompt", "kind": "function", "doc": "<p>Returns the interpreter prompt.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">interim</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">Text</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.repl.REPL.welcome", "modulename": "src.lang.repl", "qualname": "REPL.welcome", "kind": "function", "doc": "<p>Build a welcome text box.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">Text</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.repl.REPL.help", "modulename": "src.lang.repl", "qualname": "REPL.help", "kind": "function", "doc": "<p>Display help information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">panel</span><span class=\"o\">.</span><span class=\"n\">Panel</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.repl.REPL.clear", "modulename": "src.lang.repl", "qualname": "REPL.clear", "kind": "function", "doc": "<p>Clear the terminal.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">Text</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.repl.REPL.quit", "modulename": "src.lang.repl", "qualname": "REPL.quit", "kind": "function", "doc": "<p>Exit the interactive interpreter.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.repl.REPL.flags", "modulename": "src.lang.repl", "qualname": "REPL.flags", "kind": "function", "doc": "<p>Display current active and inactive flags.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">panel</span><span class=\"o\">.</span><span class=\"n\">Panel</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.repl.REPL.show_closures", "modulename": "src.lang.repl", "qualname": "REPL.show_closures", "kind": "function", "doc": "<p>Display the current closures.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">pretty</span><span class=\"o\">.</span><span class=\"n\">Pretty</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.repl.REPL.show_globals", "modulename": "src.lang.repl", "qualname": "REPL.show_globals", "kind": "function", "doc": "<p>Display all global variables.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">pretty</span><span class=\"o\">.</span><span class=\"n\">Pretty</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.repl.REPL.show_imports", "modulename": "src.lang.repl", "qualname": "REPL.show_imports", "kind": "function", "doc": "<p>Display all currently imported modules and libraries.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">pretty</span><span class=\"o\">.</span><span class=\"n\">Pretty</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.repl.REPL.show_env", "modulename": "src.lang.repl", "qualname": "REPL.show_env", "kind": "function", "doc": "<p>Display current environment.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">pretty</span><span class=\"o\">.</span><span class=\"n\">Pretty</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.repl.REPL.show_dev", "modulename": "src.lang.repl", "qualname": "REPL.show_dev", "kind": "function", "doc": "<p>Display useful dev tools.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">panel</span><span class=\"o\">.</span><span class=\"n\">Panel</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.lang.repl.REPL.show_keywords", "modulename": "src.lang.repl", "qualname": "REPL.show_keywords", "kind": "function", "doc": "<p>Display all language keywords.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">Table</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();